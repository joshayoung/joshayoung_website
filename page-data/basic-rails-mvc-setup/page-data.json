{"componentChunkName":"component---src-templates-post-js","path":"/basic-rails-mvc-setup","webpackCompilationHash":"4c91aed5252805ee1cfe","result":{"data":{"markdownRemark":{"html":"<p>I wrote this post to describe the basic rails setup to get a simple CRUD application going. Of course this can be greatly improved upon, but I thought it would be helpful to outline the basic structure. I will outline each file with a simple explanation for each one. To initialize a project list this, you would need to have rails 5 installed and create a new project with the <code>rails new [project name]</code> command.</p>\n<h4>Create the Database and Model</h4>\n<pre><code class=\"language-bash\">  # Creates the initial ruby project files:\n  rails new notes\n\n  # Creates the migration and model file:\n  rails g model note subject:string, body:string\n\n  # Runs the migration to create the database:\n  rails db:migrate\n</code></pre>\n<h4>Add validation to model file</h4>\n<pre><code class=\"language-ruby\">  # app/models/note.rb\n  class Note &#x3C; ApplicationRecord\n    validates :subject, :body, presence: true\n  end\n</code></pre>\n<h4>Create the Controller</h4>\n<pre><code class=\"language-ruby\">  # Creates an empty controller file:\n  rails g controller notes\n</code></pre>\n<h4>Setup the route file</h4>\n<pre><code class=\"language-ruby\">  # config/routes.rb\n  Rails.application.routes.draw do\n    root    'notes#index'\n    get     'notes'           => 'notes#index', as: 'notes'\n    post    'notes'           => 'notes#create'\n    get     'notes/new'       => 'notes#new',   as: 'new_note'\n    get     'notes/:id/edit'  => 'notes#edit',  as: 'edit_note'\n    get     'notes/:id'       => 'notes#show',  as: 'note'\n    patch   'notes/:id'       => 'notes#update'\n    put     'notes/:id'       => 'notes#update'\n    delete  'notes/:id'       => 'notes#destroy'\n  end\n</code></pre>\n<h4>Populate the Controller with the needed logic</h4>\n<pre><code class=\"language-ruby\">  # app/controllers/notes_controller.rb\n  class NotesController &#x3C; ApplicationController\n\n    def index\n      @notes = Note.all\n    end\n\n    def create\n      @note = Note.new(subject: params[:note][:subject], body: params[:note][:body])\n      if @note.save\n        redirect_to notes_url\n      else\n        render :new\n      end\n    end\n\n    def new\n      @note = Note.new\n    end\n\n    def edit\n      @note = Note.find_by(id: params[:id])\n    end\n\n    def show\n      @note = Note.find(params[:id])\n    end\n\n    def update\n      note = Note.find(params[:id])\n      note.update(subject: params[:note][:subject], body: params[:note][:body])\n      redirect_to(notes_url)\n    end\n\n    def destroy\n      Note.find(params[:id]).destroy\n      redirect_to(notes_url)\n    end\n  end\n</code></pre>\n<h4>Setup <code>simple_form_for</code></h4>\n<p><a href=\"https://github.com/plataformatec/simple_form\">Simple Form</a></p>\n<p>Add <code>gem 'simple_form'</code> to your <code>Gemfile</code> and then run <code>bundle install</code>, followed by <code>rails generate simple_form:install</code>. If you had already started the rails server <code>rails s</code>, you will need to stop it and then restart the server to use the new form method.</p>\n<h4>Setup the Views and Partials</h4>\n<p>Of course all of these files would have to be manually created in the project folders under /views and /views/shared, respectively. The files that begin with an underscore are usually stored in the shared folder. Even though they are named with an underscore, they are included in the view pages using the <code>render</code> method without the underscore, as shown below.</p>\n<h5>app/views/notes/index.html.erb</h5>\n<pre><code class=\"language-html\">  &#x3C;h1>Notes List&#x3C;/h1>\n\n  &#x3C;ul>\n  &#x3C;% @notes.each do |note| %>\n    &#x3C;li>&#x3C;%= link_to(note.subject, note_path(note)) %>&#x3C;/li>\n  &#x3C;% end %>\n  &#x3C;/ul>\n</code></pre>\n<h5>app/views/notes/new.html.erb</h5>\n<pre><code class=\"language-html\">  &#x3C;h1>Add New Note&#x3C;/h1>\n\n  &#x3C;%= render 'shared/errors' %>\n  &#x3C;%= render 'shared/form' %>\n</code></pre>\n<h5>app/views/notes/edit.html.erb</h5>\n<pre><code class=\"language-html\">  &#x3C;h1>Edit&#x3C;/h1>\n\n  &#x3C;%= render 'shared/errors' %>\n  &#x3C;%= render 'shared/form' %>\n</code></pre>\n<h5>app/views/notes/show.html.erb</h5>\n<pre><code class=\"language-html\">  &#x3C;h1>&#x3C;%= @note.subject %>&#x3C;/h1>\n  &#x3C;p>&#x3C;%= @note.body %>&#x3C;/p>\n\n  &#x3C;ul>\n    &#x3C;li>&#x3C;%= link_to('Edit Note', edit_note_path(@note)) %>&#x3C;/li>\n    &#x3C;li>&#x3C;%= link_to 'Delete', @note, method: :delete, data: { confirm: 'Click \"OK\" to proceed.' } %>&#x3C;/li>\n  &#x3C;/ul>\n</code></pre>\n<h5>app/views/shared/_errors.html.erb</h5>\n<pre><code class=\"language-html\">  &#x3C;% if @note.errors.any? %>\n    &#x3C;ul>\n      &#x3C;% @note.errors.full_messages.each do |error| %>\n        &#x3C;li>&#x3C;%= error %>&#x3C;/li>\n      &#x3C;% end %>\n    &#x3C;/ul>\n  &#x3C;% end%>\n</code></pre>\n<h5>app/views/shared/_form.html.erb</h5>\n<pre><code class=\"language-html\">  &#x3C;%= simple_form_for @note do |f| %>\n    &#x3C;%= f.input :subject, label: 'Subject' %>\n    &#x3C;%= f.input :body, label: 'Body' %>\n    &#x3C;%= f.button :submit %>\n  &#x3C;% end %>\n</code></pre>\n<p>I have included the code for this mvc application in this <a href=\"https://github.com/joshayoung/basic-rails-mvc&#x27;%3Ebasic-rails-mvc\">repo</a></p>","frontmatter":{"date":"May 20, 2018","path":"/basic-rails-mvc-setup","title":"Basic Rails MVC Setup"}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}}