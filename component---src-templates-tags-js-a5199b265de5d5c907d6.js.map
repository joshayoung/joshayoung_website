{"version":3,"sources":["webpack:///./src/templates/tags.js"],"names":["Tags","pageContext","data","tag","allMarkdownRemark","edges","totalCount","tagHeader","map","node","path","frontmatter","title","key","to"],"mappings":"4FAAA,yDA0DeA,UAnDF,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,YAAaC,EAAW,EAAXA,KACnBC,EAAQF,EAARE,IACR,EAA8BD,EAAKE,kBAA3BC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,WACTC,EAAeD,EAAN,SACE,IAAfA,EAAmB,GAAK,KADX,iBAEEH,EAFF,IAIf,OACE,YAAC,IAAD,KACE,sBAAKI,GACL,sBACGF,EAAMG,KAAI,YAAe,IAAZC,EAAW,EAAXA,KACJC,EAASD,EAAKE,YAAdD,KACAE,EAAUH,EAAKE,YAAfC,MACR,OACE,kBAAIC,IAAKD,GACP,YAAC,IAAD,CAAME,GAAIJ,GAAOE,OAIvB,sBACE,YAAC,IAAD,CAAME,GAAG,SAAT","file":"component---src-templates-tags-js-a5199b265de5d5c907d6.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Layout from \"../components/layout\";\n\n// Components\nimport { Link, graphql } from \"gatsby\";\n\nconst Tags = ({ pageContext, data }) => {\n  const { tag } = pageContext;\n  const { edges, totalCount } = data.allMarkdownRemark;\n  const tagHeader = `${totalCount} post${\n    totalCount === 1 ? \"\" : \"s\"\n  } tagged with \"${tag}\"`;\n\n  return (\n    <Layout>\n      <h1>{tagHeader}</h1>\n      <ul>\n        {edges.map(({ node }) => {\n          const { path } = node.frontmatter;\n          const { title } = node.frontmatter;\n          return (\n            <li key={title}>\n              <Link to={path}>{title}</Link>\n            </li>\n          );\n        })}\n        <li>\n          <Link to=\"/tags\">See All tags</Link>\n        </li>\n      </ul>\n    </Layout>\n  );\n};\n\nTags.propTypes = {\n  pageContext: PropTypes.shape({\n    tag: PropTypes.string.isRequired,\n  }),\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      totalCount: PropTypes.number.isRequired,\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n              title: PropTypes.string.isRequired,\n            }),\n            fields: PropTypes.shape({\n              slug: PropTypes.string.isRequired,\n            }),\n          }),\n        }).isRequired\n      ),\n    }),\n  }),\n};\n\nexport default Tags;\n\nexport const pageQuery = graphql`\n  query($tag: String) {\n    allMarkdownRemark(\n      limit: 2000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { tags: { in: [$tag] } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          frontmatter {\n            title\n            path\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}